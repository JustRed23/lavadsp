plugins {
    id 'java-library'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

def versionObj = new Version(major: 0, minor: 7, revision: 7)

group 'com.github.natanbc'
version "${versionObj}-1"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation 'org.slf4j:slf4j-api:2.0.6'
    implementation 'com.github.natanbc:native-loader:0.7.0'
    implementation "com.github.JustRed23:lavadsp-natives:${versionObj}-1"
    compileOnly 'com.github.walkyst:lavaplayer-fork:1.4.0'
}

import org.apache.tools.ant.filters.ReplaceTokens

task sourcesForRelease(type: Copy) {
    from 'src/main/java'
    into 'build/filteredSrc'
    filter(ReplaceTokens, tokens: [
            VERSION_MAJOR: versionObj.getMajor(),
            VERSION_MINOR: versionObj.getMinor(),
            VERSION_REVISION: versionObj.getRevision(),
            COMMIT_HASH: getCommitHash()
    ])
}

compileJava {
    source = sourcesForRelease.destinationDir
    classpath = sourceSets.main.compileClasspath

    options.encoding = 'UTF-8'

    dependsOn sourcesForRelease
}

jar {
    baseName = project.name
    manifest {
        attributes 'Implementation-Version': version
    }
}

shadowJar {
    classifier = "withDependencies"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from "${buildDir}/filteredSrc"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

String getProjectProperty(String propertyName) {
    String property
    if(hasProperty(propertyName)) {
        property = project.properties[propertyName]
    } else {
        property = System.getenv(propertyName) ?: ""
    }
    return property
}

static def getCommitHash() {
    def p = Runtime.getRuntime().exec("git rev-parse HEAD")
    p.waitFor()
    p.getIn().text.trim()
}

class Version {
    String major, minor, revision


    String toString() {
        "${major}.${minor}" + (revision == "0" ? "" : ".${revision}")
    }
}

